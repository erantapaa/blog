---
title: "First Person camera"
date: 2016-04-29 22:10:40
categories: ["camera", "euler angles"]
---

Assuming that the world space axes are as follows

<figure>
  <div class="figure-images">
    <img src="/images/xyz.jpg" alt="">
  </div>
  <figcaption>Chosen world space $$+x$$ (right), $$+y$$ (up) and $$+z$$ (backward), note that the choice is just personal preference</figcaption>
</figure>

We can imagine a first person camera to be a camera located at the origin which is looking at a point $$\mathbf{p}$$ that exists in the *world space*, however if the camera is able to move in the space then it'd be better if we create a space for the camera and inside this space define the point $$\mathbf{p}$$, that way even if the camera moves the looking direction is not modified

Let $$\mathbf{M}_{camera \to world}$$ be the rotation matrix that transform points from *camera space* to *upright space* we can imagine that we're initially looking at the point $$\mathbf{p}_{camera} = \begin{bmatrix} 0 & 0 & -1 \end{bmatrix}^T$$ then whenever we look somewhere else we just have to update the axes of the *camera space*

We'll use Euler angles to do this, first note that the sequence of [intrinsic rotations](../../transformation-matrices/rotation/euler-angles.html#intrinsic-rotations) is $$y-x'$$ (or $$x-y$$ if expressed as a sequence of *extrinsic rotations*) represents effectively the movement of a camera (for the sake of simplicity we won't consider *roll*), this sequence can be expressed as a multiplication of the following rotation matrices

$$
\begin{align*}
\mathbf{M}_{camera \to world} &= \mathbf{Y}(\alpha) \mathbf{X}(\gamma) \\
&= \begin{bmatrix}
\cos{\alpha} & 0 & \sin{\alpha} \\
0 & 1 & 0 \\
-\sin{\alpha} & 0 & \cos{\alpha}
\end{bmatrix} \begin{bmatrix}
1 & 0 & 0 \\
0 & \cos{\beta} & -\sin{\beta} \\
0 & \sin{\beta} & \cos{\beta}
\end{bmatrix}
\\
&= \begin{bmatrix}
\cos{\alpha} & \sin{\alpha}\sin{\beta} & \sin{\alpha}\cos{\beta} \\
0 & \cos{\beta} & -\sin{\beta} \\
-\sin{\alpha} & \cos{\alpha}\sin{\beta} & \cos{\alpha}\cos{\beta}
\end{bmatrix}
\end{align*}
$$

Next we need to define what happens when we move the mouse, we can configure a window manager like [GLFW](http://www.glfw.org/) to call a callback method whenever we move the mouse with the coordinates of the mouse as an argument (e.g. as $$x_{new}$$ and $$y_{new}$$), **Note: the coordinates of the mouse are expressed relative to the top left corner of the window whose $$+x$$-axis points right and $$+y$$-axis points down**, next if we keep the old coordinates of the mouse (as $$x_{old}$$ and $$y_{old}$$) we can obtain how much the mouse moved with respect to the old position with the following calculation

$$
\begin{align*}
\Delta x &= x_{new} - x_{old} \\
\Delta y &= -(y_{new} - y_{old})
\end{align*}
$$

Note that $$y_{new} - y_{old}$$ will be positive if we move the mouse down which is unintuitive, therefore we can multiply this result by $$-1$$ so that moving the mouse downward sets a negative value in $$\Delta y$$

The next step is to update the values of $$\alpha$$ (yaw) and $$\beta$$ (pitch) using $$\Delta x$$ and $$\Delta y$$, note that when we move the mouse to the right we're moving clockwise with respect to the $$+y$$ axis and when we move the mouse upward we're moving counterclockwise with respect to the $$+x$$-axis therefore

$$
\alpha := \alpha - \Delta x \\
\beta := \beta + \Delta y
$$

Note that the we also need to value of $$\beta$$ to be inside the range $$-\deg{90} \leq \beta \leq \deg{90}$$ to avoid looking backwards

Finally to compute the real value of $$\mathbf{p}_{world}$$ we need to transform $$\mathbf{p}_{object}$$ with $$\mathbf{M}_{object \to world}$$, note however that the value of $$\mathbf{p}_{object} = \begin{bmatrix} 0 & 0 & -1 \end{bmatrix}^T$$ is always the same, therefore the value of $$\mathbf{p}_{world}$$ is

$$
\begin{align*}
\mathbf{p}_{world} &= \mathbf{M}_{object \to world} \mathbf{p}_{object} \\
&= \begin{bmatrix}
\cos{\alpha} & \sin{\alpha}\sin{\beta} & \sin{\alpha}\cos{\beta} \\
0 & \cos{\beta} & -\sin{\beta} \\
-\sin{\alpha} & \cos{\alpha}\sin{\beta} & \cos{\alpha}\cos{\beta}
\end{bmatrix} \begin{bmatrix} 0 \\ 0 \\ -1 \end{bmatrix} \\
&= \begin{bmatrix}
-\sin{\alpha}\cos{\beta} \\
\sin{\beta} \\
-\cos{\alpha}\cos{\beta}
\end{bmatrix}
\end{align*}
$$

```cpp
{% include code/opengl/fps.cpp%}
```

